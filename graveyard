#!/usr/bin/env python3

import os
import sys
import shutil
import subprocess
import datetime
import argparse
import filecmp
from pathlib import Path
from typing import Tuple, Optional, List

# Exit codes
E_SUCCESS = 0
E_GENERAL = 1
E_NO_TARGET = 2
E_INVALID_TARGET = 3
E_MISSING_DEPS = 4
E_COMPILE_FAIL = 5
E_INSTALL_FAIL = 6

# Define paths and variables
USER_BIN = "/usr/bin"
EXEC = "lsc"
BUILD_DIR = "build"
BIN_DIR = "bin"
TARGET_DIR = "target"
SRC_DIR = "src"
INCLUDE_DIR = "includes"
log_file = "log.grv"

# Compiler flags
IMPL_FLAGS = [
    "-DSKULL_LIST_H_IMPLEMENTATION", "-DSKULL_AST_H_IMPLEMENTATION",
    "-DSKULL_TOKEN_H_IMPLEMENTATION", "-DSKULL_LEXER_H_IMPLEMENTATION",
    "-DSKULL_PARSER_H_IMPLEMENTATION", "-DSKULL_TYPES_H_IMPLEMENTATION",
    "-DSKULL_UTILS_H_IMPLEMENTATION", "-DSKULL_ASM_H_IMPLEMENTATION",
    "-DSKULL_H_IMPLEMENTATION"
]

# All valid targets
VALID_TARGETS = [
    "diff", "resurrect", "lsc-compile", "lsc-remove", "lsc-recompile",
    "lsc-install", "lsc-uninstall", "lsc-reinstall", "clear-log", "usage"
]

# Define color codes for terminal output
RED = '\033[0;31m'
GREEN = '\033[0;32m'
BLUE = '\033[0;34m'
YELLOW = '\033[0;33m'
NC = '\033[0m'  # No Color - reset

class Graveyard:
    def __init__(self, args):
        # Initialize attributes first
        self.skull_dir = None
        self.original_dir = os.getcwd()
        
        # Find Skull directory before parsing arguments
        self.skull_dir = self.find_skull_dir()
        
        # Now parse arguments (only once)
        self.parse_arguments(args)
        
        if not self.skull_dir:
            self.error("Could not find valid Skull directory")
            sys.exit(E_GENERAL)
            
        self.info(f"Found Skull directory at: {self.skull_dir}")
        
        # Check for GCC
        if not self.check_gcc():
            sys.exit(E_MISSING_DEPS)
    
    def log_message(self, level, message):
        """Append a message to the log file"""
        was_in_skull_dir = False

        try:
            log_file = os.path.expanduser("~/.graveyard/log.grv")
            os.makedirs(os.path.dirname(log_file), exist_ok=True)
            
            timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            with open(log_file, "a") as log:
                log.write(f"[{timestamp}] {level}: {message}\n")

            # Restore directory if needed
            if was_in_skull_dir:
                self.return_to_original_dir()
        except Exception as e:
            if self.verbose:
                print(f"{RED}[Graveyard_LOG_ERROR]: Could not write to log: {str(e)}{NC}", file=sys.stderr)


    def parse_arguments(self, args):
        parser = argparse.ArgumentParser(description='Graveyard - Build and installation manager for LSC',
                                         add_help=False)
        parser.add_argument('target', nargs='?', help='Target to execute')
        parser.add_argument('-V', action='store_true', help='Verbose (display info messages)')
        parser.add_argument('-Q', action='store_true', help='Super quiet mode (display only errors)')
        parser.add_argument('--no-log', action='store_true', help="Don't echo output to log file")
        parser.add_argument('--no-warn', action='store_true', help="Don't display warnings")
        
        args, unknown = parser.parse_known_args(args)
        
        # Set flags
        self.verbose = args.V
        self.super_quiet = args.Q
        self.no_log = args.no_log
        self.no_warn = args.no_warn
        
        # Process target
        if args.target and args.target in VALID_TARGETS:
            self.target = args.target
        else:
            if args.target:
                self.warning(f"Invalid target: {args.target}")
            self.error("No valid target specified")
            self.show_usage()
            sys.exit(E_NO_TARGET)
            
        # Log parsed arguments
        self.info(f"Target: {self.target}")
        self.info(f"Flags: Verbose={self.verbose}, SuperQuiet={self.super_quiet}, "
                  f"NoLog={self.no_log}, NoWarn={self.no_warn}")
        
        # Check for unknown arguments
        for arg in unknown:
            self.warning(f"Unknown argument: {arg}")

    def navigate_to_skull_dir(self):
        """Change to the Skull directory if it's set"""
        if self.skull_dir:
            try:
                os.chdir(self.skull_dir)
                return True
            except Exception as e:
                self.error(f"Failed to change to Skull directory: {self.skull_dir}. {str(e)}")
                sys.exit(1)
        return False

    def return_to_original_dir(self):
        """Return to the original directory"""
        try:
            os.chdir(self.original_dir)
            return True
        except Exception as e:
            self.error(f"Failed to return to original directory: {self.original_dir}. {str(e)}")
            return False

    def error(self, message):
        """Display and log error messages"""
        # Errors are always displayed, regardless of quiet flags
        print(f"{RED}[Graveyard_ERROR]: {message}{NC}", file=sys.stderr)
        
        # Log errors unless NO_LOG is set
        if not self.no_log:
            self.log_message("ERROR", message)

    def success(self, message):
        """Display and log success messages"""
        # Success messages are shown unless SUPER_QUIET is set
        if not self.super_quiet:
            print(f"{GREEN}[Graveyard_SUCCESS]: {message}{NC}")
        
        # Log success unless NO_LOG is set
        if not self.no_log:
            self.log_message("SUCCESS", message)

    def info(self, message):
        """Display and log informational messages"""
        # Info messages are not shown unless VERBOSE set
        if self.verbose:
            print(f"{BLUE}{message}{NC}")
        
        # Log info unless NO_LOG is set
        if not self.no_log:
            self.log_message("INFO", message)

    def warning(self, message):
        """Display and log warning messages"""
        # Warning messages are shown unless NO_WARN or SUPER_QUIET are set
        if not self.no_warn and not self.super_quiet:
            print(f"{YELLOW}[Graveyard_WARNING]: {message}{NC}", file=sys.stderr)
        
        # Log warnings unless NO_LOG is set
        if not self.no_log:
            self.log_message("WARNING", message)

    def find_skull_dir(self) -> Optional[str]:
        """Locate the Skull directory"""
        head_dir = os.path.basename(os.getcwd())
        
        # Check if we're already in the Skull directory
        if head_dir == "Skull" and os.path.isdir("includes") and os.path.isdir("src"):
            return os.getcwd()
        
        # Find all Skull directories in HOME
        home = os.path.expanduser("~")
        skull_dirs = []
        try:
            # Using subprocess for better error handling when using sudo
            result = subprocess.run(
                ["find", home, "-name", "Skull", "-type", "d"],
                capture_output=True, text=True
            )
            if result.returncode == 0:
                skull_dirs = result.stdout.strip().split('\n')
                skull_dirs = [d for d in skull_dirs if d]  # Remove empty lines
        except Exception as e:
            self.warning(f"Error searching for Skull directories: {str(e)}")
        
        # Loop through found directories
        for candidate in skull_dirs:
            if os.path.isdir(os.path.join(candidate, "includes")) and os.path.isdir(os.path.join(candidate, "src")):
                return candidate
        
        return None

    def check_gcc(self) -> bool:
        """Check if gcc is installed, attempt to install if not"""
        self.info("Checking for GCC compiler...")
        
        # Check if gcc is installed and get version
        try:
            result = subprocess.run(["gcc", "--version"], capture_output=True, text=True)
            if result.returncode == 0:
                self.info(f"Found GCC: {result.stdout.splitlines()[0]}")
                return True
        except FileNotFoundError:
            pass
        
        # GCC not found, attempt to install it
        self.warning("GCC compiler not found. Attempting to install...")
        
        # Track installation attempt
        installation_attempted = False
        installation_success = False
        
        # Detect package manager and install gcc
        package_managers = {
            "pacman": ["sudo", "pacman", "-Sy", "--noconfirm", "gcc"],
            "apt": ["sudo", "apt", "update", "&&", "sudo", "apt", "install", "-y", "gcc"],
            "dnf": ["sudo", "dnf", "install", "-y", "gcc"],
            "yum": ["sudo", "yum", "install", "-y", "gcc"],
            "zypper": ["sudo", "zypper", "install", "-y", "gcc"],
            "apk": ["sudo", "apk", "add", "gcc", "build-base"],
            "brew": ["brew", "install", "gcc"],
            "port": ["sudo", "port", "install", "gcc"]
        }
        
        for pm, cmd in package_managers.items():
            if shutil.which(pm):
                self.info(f"Detected {pm} package manager")
                installation_attempted = True
                try:
                    # For apt which needs multiple commands
                    if pm == "apt":
                        subprocess.run(["sudo", "apt", "update"], check=True)
                        result = subprocess.run(["sudo", "apt", "install", "-y", "gcc"], check=True)
                    else:
                        result = subprocess.run(cmd, check=True)
                    installation_success = True
                    break
                except subprocess.CalledProcessError:
                    continue
        
        # Check if installation was attempted
        if not installation_attempted:
            self.error("Unable to detect package manager. Please install GCC manually and try again.")
            return False
        
        # Verify installation was successful
        if not installation_success:
            self.error("Failed to install GCC using the detected package manager.")
            return False
        
        # Final verification
        try:
            result = subprocess.run(["gcc", "--version"], capture_output=True, text=True)
            if result.returncode == 0:
                self.success(f"Successfully installed GCC: {result.stdout.splitlines()[0]}")
                return True
            else:
                self.error("GCC installation appeared to succeed, but gcc command still not found.")
                self.error("Please install GCC manually and try again.")
                return False
        except FileNotFoundError:
            self.error("GCC installation appeared to succeed, but gcc command still not found.")
            self.error("Please install GCC manually and try again.")
            return False

    def create_dirs(self) -> bool:
        """Create required directories for build"""
        self.navigate_to_skull_dir()
        
        try:
            os.makedirs(os.path.join(TARGET_DIR, BUILD_DIR), exist_ok=True)
            os.makedirs(os.path.join(TARGET_DIR, BIN_DIR), exist_ok=True)
            self.return_to_original_dir()
            return True
        except Exception as e:
            self.error(f"Failed to create directories: {str(e)}")
            self.return_to_original_dir()
            return False

    def compile_sources(self) -> bool:
        """Compile all source files"""
        self.navigate_to_skull_dir()
        
        # Find all .c files in src directory
        src_files = []
        for root, _, files in os.walk(SRC_DIR):
            for file in files:
                if file.endswith(".c"):
                    src_files.append(os.path.join(root, file))
        
        if not src_files:
            self.error(f"No source files found in {SRC_DIR}")
            self.return_to_original_dir()
            return False

        # Compile each source file to object file
        for src in src_files:
            obj = os.path.join(
                TARGET_DIR, BUILD_DIR,
                os.path.basename(src).replace(".c", ".o")
            )
            self.info(f"Compiling {src} to {obj}...")
            
            try:
                cmd = ["gcc", "-g", "-Wall", f"-I{INCLUDE_DIR}"]
                cmd.extend(IMPL_FLAGS)
                cmd.extend(["-c", src, "-o", obj])
                subprocess.run(cmd, check=True)
            except subprocess.CalledProcessError:
                self.error(f"Compilation of {src} failed")
                self.return_to_original_dir()
                return False
        
        self.return_to_original_dir()
        return True

    def link_executable(self) -> bool:
        """Link object files into executable"""
        self.navigate_to_skull_dir()
        
        # Find all object files
        obj_files = []
        obj_dir = os.path.join(TARGET_DIR, BUILD_DIR)
        for file in os.listdir(obj_dir):
            if file.endswith(".o"):
                obj_files.append(os.path.join(obj_dir, file))
        
        if not obj_files:
            self.error(f"No object files found in {obj_dir}")
            self.return_to_original_dir()
            return False

        # Link the executable
        self.info(f"Linking {TARGET_DIR}/{BIN_DIR}/{EXEC}...")
        try:
            cmd = ["gcc"]
            cmd.extend(obj_files)
            cmd.extend(["-lm", "-ldl", "-fPIC", "-rdynamic", "-o", 
                       os.path.join(TARGET_DIR, BIN_DIR, EXEC)])
            subprocess.run(cmd, check=True)
        except subprocess.CalledProcessError:
            self.error("Linking failed")
            self.return_to_original_dir()
            return False
        
        self.return_to_original_dir()
        return True

    def build(self) -> bool:
        """Build the project"""
        if not self.create_dirs():
            return False
        if not self.compile_sources():
            return False
        if not self.link_executable():
            return False
        return True

    def files_are_different(self, file1: str, file2: str) -> Tuple[bool, Optional[str]]:
        """Check if two files are different and which is newer"""
        # Check if both files exist
        if not os.path.isfile(file1) and not os.path.isfile(file2):
            return False, None  # Both files don't exist
        
        if not os.path.isfile(file1):
            return True, file2  # Only file2 exists
            
        if not os.path.isfile(file2):
            return True, file1  # Only file1 exists
        
        # Compare file contents
        try:
            if not filecmp.cmp(file1, file2):
                # Determine which file is newer
                if os.path.getmtime(file1) > os.path.getmtime(file2):
                    return True, file1
                else:
                    return True, file2
        except Exception as e:
            self.warning(f"Error comparing files: {str(e)}")
            return True, None  # Return different but unknown which is newer
        
        # Files are identical
        return False, None

    def show_usage(self):
        """Display usage information"""
        usage = f"""
                        graveyard - Usage Information                        
-----------------------------------------------------------------------------

Usage: graveyard <Target> [Flags]

Targets:
                  diff          : Checks for any diffs in bytes between the Installed graveyard and the graveyard in the Skull dir
                  resurrect     : Updates graveyard or if you dont have it installed it Installs graveyard to /usr/bin
                  lsc-compile   : Compiles LSC to a binary
                  lsc-remove    : Deletes the compiled LSC binary and its build artifacts
                  lsc-recompile : Recompiles LSC (Alternative: graveyard lsc-remove && graveyard lsc-compile)
                  lsc-install   : Compiles LSC and installs to /usr/bin
                  lsc-uninstall : Uninstalls LSC from /usr/bin
                  lsc-reinstall : Reinstalls LSC (Alternative: graveyard lsc-uninstall && graveyard lsc-install)
                  clear-log     : Deletes the log file (log.grv)
                  usage         : Display this help message

Flags:
                  -V            : Verbose (Displays info messages)
                  -Q            : Displays nothing at all except errors
                  --no-log      : Doesnt echo the output to a file
                  --no-warn     : Displays no warnings at all

Note: Flags and target can be specified in any order.
"""
        print(usage)

    def handle_lsc_target(self) -> int:
        """Handle LSC-related targets"""
        self.navigate_to_skull_dir()
        
        if self.target == "lsc-compile":
            self.info(f"Compiling {EXEC}...")
            if not self.build():
                self.error("Compilation failed")
                self.return_to_original_dir()
                return E_COMPILE_FAIL
            self.success(f"{EXEC} Compiled Successfully")
            
        elif self.target == "lsc-remove":
            self.info(f"Removing {EXEC} build artifacts...")
            try:
                shutil.rmtree(TARGET_DIR, ignore_errors=True)
                self.success("Build artifacts removed successfully")
            except Exception as e:
                self.error(f"Failed to remove build artifacts: {str(e)}")
                self.return_to_original_dir()
                return E_GENERAL
                
        elif self.target == "lsc-recompile":
            self.info(f"Recompiling {EXEC}...")
            self.info(f"Cleaning {TARGET_DIR}...")
            try:
                shutil.rmtree(TARGET_DIR, ignore_errors=True)
            except Exception as e:
                self.warning(f"Failed to clean target directory: {str(e)}")
            
            if not self.build():
                self.error("Recompilation failed")
                self.return_to_original_dir()
                return E_COMPILE_FAIL
            self.success("Recompiled Successfully")
            
        elif self.target == "lsc-install":
            if not self.build():
                self.error("Build failed during installation")
                self.return_to_original_dir()
                return E_COMPILE_FAIL
                
            self.info(f"Installing {EXEC}...")
            try:
                src = os.path.join(TARGET_DIR, BIN_DIR, EXEC)
                dst = os.path.join(USER_BIN, EXEC)
                subprocess.run(["sudo", "cp", "-f", src, dst], check=True)
                self.success(f"{EXEC} Installed Successfully")
            except subprocess.CalledProcessError:
                self.error(f"Installation of {EXEC} to {USER_BIN} failed")
                self.return_to_original_dir()
                return E_INSTALL_FAIL
                
        elif self.target == "lsc-uninstall":
            self.info(f"Uninstalling {EXEC} from system...")
            bin_path = os.path.join(USER_BIN, EXEC)
            if os.path.isfile(bin_path):
                try:
                    subprocess.run(["sudo", "rm", "-f", bin_path], check=True)
                    self.success(f"{EXEC} uninstalled successfully from {USER_BIN}")
                except subprocess.CalledProcessError:
                    self.error(f"Failed to remove {EXEC} from {USER_BIN}")
                    self.return_to_original_dir()
                    return E_GENERAL
            else:
                self.warning(f"{EXEC} not found in {USER_BIN}, nothing to uninstall")
                
        elif self.target == "lsc-reinstall":
            self.info(f"Reinstalling {EXEC}...")
            # First uninstall
            bin_path = os.path.join(USER_BIN, EXEC)
            if os.path.isfile(bin_path):
                try:
                    subprocess.run(["sudo", "rm", "-f", bin_path], check=True)
                except subprocess.CalledProcessError:
                    self.error(f"Failed to remove {EXEC} from {USER_BIN} during reinstall")
                    self.return_to_original_dir()
                    return E_GENERAL
                    
            # Clean build artifacts
            try:
                shutil.rmtree(TARGET_DIR, ignore_errors=True)
            except Exception as e:
                self.warning(f"Failed to clean target directory during reinstall: {str(e)}")
                
            # Build and install
            if not self.build():
                self.error("Build failed during reinstallation")
                self.return_to_original_dir()
                return E_COMPILE_FAIL
                
            try:
                src = os.path.join(TARGET_DIR, BIN_DIR, EXEC)
                dst = os.path.join(USER_BIN, EXEC)
                subprocess.run(["sudo", "cp", "-f", src, dst], check=True)
                self.success(f"{EXEC} Reinstalled Successfully")
            except subprocess.CalledProcessError:
                self.error(f"Installation of {EXEC} to {USER_BIN} failed")
                self.return_to_original_dir()
                return E_INSTALL_FAIL
                
        self.return_to_original_dir()
        return E_SUCCESS

    def run(self) -> int:
        """Execute the requested target"""
        result = E_SUCCESS
        
        # Handle LSC targets separately
        if self.target.startswith("lsc-"):
            return self.handle_lsc_target()
            
        # Execute other targets
        if self.target == "diff":
            self.navigate_to_skull_dir()
            user_bin_path = os.path.join(USER_BIN, "graveyard")
            local_path = "graveyard"
            
            if os.path.isfile(user_bin_path) and os.path.isfile(local_path):
                self.info("Checking Requirements: [Are Filesizes Different]...")
                different, newer = self.files_are_different(user_bin_path, local_path)
                if different:
                    self.success("Met Requirements: [Filesizes Are Different]!")
                else:
                    self.warning("Unmet Requirements: [Filesizes Are Not Different]!")
            else:
                if not os.path.isfile(user_bin_path):
                    self.warning(f"graveyard file not found in {USER_BIN}")
                if not os.path.isfile(local_path):
                    self.warning(f"graveyard file not found in {os.getcwd()}")
                result = E_GENERAL
            self.return_to_original_dir()  
        elif self.target == "resurrect":
            self.navigate_to_skull_dir()
            user_bin_path = os.path.join(USER_BIN, "graveyard")
            local_path = "graveyard"
            
            if os.path.isfile(user_bin_path) and os.path.isfile(local_path):
                self.info("Updating graveyard...")
                try:
                    subprocess.run(["sudo", "cp", "-f", local_path, user_bin_path], check=True)
                    self.info("Installing bash completion...")
                    
                    # Content for the completion script
                    completion_content = """
# Bash completion for graveyard
_graveyard_completions()
{
    local cur prev opts targets flags
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    
    # List of all valid targets
    targets="diff resurrect lsc-compile lsc-remove lsc-recompile lsc-install lsc-uninstall lsc-reinstall clear-log usage"
    
    # List of all valid flags
    flags="--no-warn --no-log -Q -V"
    
    # If we're completing the first argument or a flag was provided first,
    # suggest both targets and flags
    if [[ ${COMP_CWORD} -eq 1 ]] || [[ ${COMP_WORDS[1]} == -* ]]; then
        # If current word starts with a dash, suggest only flags
        if [[ ${cur} == -* ]]; then
            COMPREPLY=( $(compgen -W "${flags}" -- "${cur}") )
        else
            # Otherwise suggest both targets and flags
            COMPREPLY=( $(compgen -W "${targets} ${flags}" -- "${cur}") )
        fi
        return 0
    fi
    
    # For subsequent arguments, suggest only flags
    # (if the user has already entered a target)
    if [[ " ${COMP_WORDS[@]} " =~ " diff " || " ${COMP_WORDS[@]} " =~ " resurrect " || \\
        " ${COMP_WORDS[@]} " =~ " lsc-compile " || " ${COMP_WORDS[@]} " =~ " lsc-remove " || \\
        " ${COMP_WORDS[@]} " =~ " lsc-recompile " || " ${COMP_WORDS[@]} " =~ " lsc-install " || \\
        " ${COMP_WORDS[@]} " =~ " lsc-uninstall " || " ${COMP_WORDS[@]} " =~ " lsc-reinstall " || \\
        " ${COMP_WORDS[@]} " =~ " clear-log " || " ${COMP_WORDS[@]} " =~ " usage " ]]; then
        
        # If the current word starts with a dash, suggest flags
        if [[ ${cur} == -* ]]; then
            COMPREPLY=( $(compgen -W "${flags}" -- "${cur}") )
        fi
        return 0
    fi
    
    return 0
}
# Register the completion function
complete -F _graveyard_completions graveyard
                """
                    # Create .bash_completion.d directory if it doesn't exist
                    user_home = os.path.expanduser("~")
                    completion_dir = os.path.join(user_home, ".bash_completion.d")
                    
                    # Fix for the bash completion directory creation and permissions
                    try:
                        # Check if directory exists first
                        if not os.path.isdir(completion_dir):
                            # Create the directory
                            os.makedirs(completion_dir, exist_ok=True)
                        
                        # Write completion script
                        completion_path = os.path.join(completion_dir, "graveyard")
                        with open(completion_path, "w") as f:
                            f.write(completion_content)
                        self.success(f"Bash completion script installed to {completion_path}")
                    except PermissionError:
                        # If permission denied, try with sudo
                        try:
                            # Use sudo to create the directory
                            subprocess.run(["sudo", "mkdir", "-p", completion_dir], check=True)
                            
                            # Set proper ownership so user can write to it
                            subprocess.run(["chmod", "755", completion_dir], check=True)
                            subprocess.run(["sudo", "chown", f"{os.getenv('USER')}:", completion_dir], check=True)
                            
                            # Try writing again
                            with open(completion_path, "w") as f:
                                f.write(completion_content)
                            self.success(f"Bash completion script installed to {completion_path}")
                        except subprocess.CalledProcessError as e:
                            self.error(f"Failed to create completion directory with sudo: {str(e)}")
                            return False
                    except Exception as e:
                        self.error(f"Failed to write completion script: {str(e)}")
                        return False
                    
                    # Update .bashrc if necessary
                    bashrc_path = os.path.join(user_home, ".bashrc")
                    bashrc_entry = '''
# Source bash completion scripts from ~/.bash_completion.d
if [ -d ~/.bash_completion.d ]; then
    for file in ~/.bash_completion.d/*; do
        source "$file"
    done
fi
                '''
                    try:
                        # Check if the entry already exists in .bashrc
                        with open(bashrc_path, "r") as f:
                            bashrc_content = f.read()
                        
                        if "source ~/.bash_completion.d/" not in bashrc_content and ".bash_completion.d/*" not in bashrc_content:
                            # Add the entry to .bashrc
                            with open(bashrc_path, "a") as f:
                                f.write(bashrc_entry)
                            self.success(f"Updated {bashrc_path} to load completions")
                        else:
                            self.info(f"Completion loading already configured in {bashrc_path}")
                    except Exception as e:
                        self.warning(f"Failed to update .bashrc: {str(e)}")
                        self.warning("You may need to manually add the following to your .bashrc:")
                        self.warning(bashrc_entry)
                    
                    self.info("For immediate use, run: source ~/.bash_completion.d/graveyard")
                    self.success("Graveyard Updated Successfully")
                except subprocess.CalledProcessError:
                    self.error("Failed to update graveyard")
                    self.return_to_original_dir()
                    return E_INSTALL_FAIL
            else:
                if os.path.isfile(local_path) and not os.path.isfile(user_bin_path):
                    self.info("Installing graveyard systemwide...")
                    try:
                        subprocess.run(["sudo", "cp", "-f", local_path, user_bin_path], check=True)
                        self.success("Graveyard Installed Successfully")
                    except subprocess.CalledProcessError:
                        self.error("Failed to install graveyard")
                        self.return_to_original_dir()
                        return E_INSTALL_FAIL
                else:
                    self.error(f"Graveyard file not found in {os.getcwd()}")
                    result = E_GENERAL
            self.return_to_original_dir()
            
        elif self.target == "clear-log":
            self.navigate_to_skull_dir()
            self.info("Clearing log file...")
            if os.path.isfile(log_file):
                try:
                    os.remove(log_file)
                    self.success("Log file cleared successfully")
                except Exception as e:
                    self.error(f"Failed to remove log file: {str(e)}")
                    self.return_to_original_dir()
                    return E_GENERAL
            else:
                self.warning(f"No log file found at {log_file}")
            self.return_to_original_dir()
            
        elif self.target == "usage":
            self.show_usage()
            
        return result


def main():
    # Create graveyard instance and run requested target
    try:
        graveyard = Graveyard(sys.argv[1:])
        result = graveyard.run()
        sys.exit(result)
    except KeyboardInterrupt:
        print("\nOperation interrupted by user.")
        sys.exit(E_GENERAL)
    except Exception as e:
        print(f"{RED}[Graveyard_ERROR]: Unhandled exception: {str(e)}{NC}", file=sys.stderr)
        sys.exit(E_GENERAL)


if __name__ == "__main__":
    main()
